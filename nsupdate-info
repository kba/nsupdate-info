#!/usr/bin/env perl
use strict;
use warnings;
use Data::Dumper;

my $APPNAME = 'nsupdate-info';
my $CACHE_DIR = join('/', $ENV{HOME}, '.local', 'cache', $APPNAME);
my $CONFIG_DIR = join('/', $ENV{HOME}, '.config', $APPNAME);
my $CONFIG_FILE = join('/', $CONFIG_DIR, 'config.ini');
my $CONFIG_FILE_TEMPLATE = q(
#
# Config File generated by %s
#
user = %s
password = %s
);
my $CRONTAB_TEMPLATE = sprintf(
    "0 * * * * ~/bin/%s ipv6 2>&1 >%s",
    $APPNAME,
    join('/', $CACHE_DIR, "$APPNAME.log")
);


my $CONFIG = {};

sub parse_kv {
    my ($arg, $argv_rest) = @_;
    $arg =~ s/^\s*|\s*$//gmx;
    if ( $arg =~ m/=/gmx ) {
        $arg =~ s/^--//gmx;
        my @kvpair = split( m/\s*=\s*/mx, $arg, 2 );
        $CONFIG->{ $kvpair[0] } = $kvpair[1];
    }
    else {
        push @{ $argv_rest }, $arg;
    }
    return $argv_rest;
}

sub parse_file {
    my ($fname) = @_;
    my @lines = read_file($fname);
    for (@lines) {
        next if /^\s*#/;
        parse_kv($_, []);
    }
}

sub parse_argv {
    my (@argv) = @_;
    my @argv_rest;
    while ( my $arg = shift(@argv) ) {
        parse_kv($arg, \@argv_rest);
    }
    return @argv_rest;
}

sub write_file {
    my ($fname, $data) = @_;
    open my $fh, ">", $fname or die "Can't write to $fname";
    print $fh $data;
    log_debug("Written data to $fname");
    close $fh;
}

sub read_file {
    my ($fname) = @_;
    my @lines;
    open my $fh, "<", $fname or do {
        warn "No such file: $fname";
        return @lines;
    };
    while (<$fh>) {
        chomp $_;
        push @lines, $_;
    }
    close $fh;
    return @lines;
}

sub current_ip {
    my ($version) = @_;
    return qx{curl -s "https://$version.nsupdate.info/myip"}; 
}

sub cache_ip {
    my ($version, $set) = @_;
    my $fname = join('/', $CACHE_DIR, $version);
    if ($set) {
        write_file($fname, $set);
    }
    my ($ret) = read_file($fname);
    return $ret || 'none';
}

sub uncache {
    my ($version) = @_;
    my $fname = join('/', $CACHE_DIR, $version);
    if (-e $fname)  {
        log_debug("Invalidating cache $fname");
        unlink $fname;
    }
}

sub set_ip {
    my ($version, $ip) = @_;
    log_debug("Set $version IP to $ip");
    my $url = sprintf('https://%s:%s@%s.nsupdate.info/nic/update',
        $CONFIG->{user},
        $CONFIG->{password},
        $version);
    log_debug("curl '$url'");
    my $err = system "curl -s '$url'";
    cache_ip $version, $ip;
}

sub usage {
    my ($msg) = @_;
    printf "$APPNAME <ipv4|ipv6|makeconfig|crontab> --user=<user> --password=<password> [--host=<host>]\n";
    if ($msg) {
        printf "\n%s\n", $msg;
    }
    exit 1;
}

sub log_debug {
    my ($msg) = @_;
    my $date = qx(date +"%Y-%m-%d %H:%M:%S.%N");
    chomp $date;
    printf "[%s] %s\n", $date, $msg;
}

sub main {
    system("mkdir -p $CACHE_DIR");
    system("mkdir -p $CONFIG_DIR");
    parse_file($CONFIG_FILE);
    my ($cmd) = parse_argv(@ARGV);
    if (! defined $cmd) {
        usage "Missing command";
    } elsif ( $cmd !~ m/^(ipv4|ipv6|makeconfig|crontab)$/gmx) {
        usage "Invalid command: $cmd";
    } elsif (! defined $CONFIG->{user} || ! defined $CONFIG->{password} ) {
        usage "Must provide --user and --password or set in $CONFIG_FILE";
    } elsif ($cmd eq 'makeconfig') {
        write_file $CONFIG_FILE, sprintf($CONFIG_FILE_TEMPLATE, $APPNAME, $CONFIG->{user}, $CONFIG->{password});
        uncache $_ for ('ipv4', 'ipv6');
    } elsif ($cmd eq 'crontab') {
        printf "Copy the following line, run `crontab -e' and paste the line:\n\n%s\n", $CRONTAB_TEMPLATE;
    } elsif ($cmd =~ m/(ipv4|ipv6)/) {
        if(system('which curl >/dev/null')) {
            usage 'Please install "curl"';
        }
        my $version = $cmd;
        my $cur = current_ip($version);
        my $cached = cache_ip($version);
        if ($cur eq $cached) {
            log_debug("Still up-to-date: $version : $cur");
        }
        if ($cur ne $cached || $CONFIG->{force}) {
            log_debug("Forcing update") if $CONFIG->{force};
            log_debug("$version IP changed: $cached -> $cur");
            set_ip($version, $cur);
        }
    }
    # warn Dumper $CONFIG;
}
main;
